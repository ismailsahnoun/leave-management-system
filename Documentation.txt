***Architecture Overview***

This project is built using Clean Architecture principles, which separates the application into distinct layers with clear responsibilities.
This approach promotes separation of concerns, testability, and maintainability.

***Project Structure*** 

The solution is organized into the following projects:

1.leaveManagement.Domain

    - Contains the core business entities and repository interfaces
    - Independent of external frameworks and technologies

2.leaveManagement.Application

    - Contains business logic, services, DTOs, and validators
    - Depends only on the Domain layer
    - Implements use cases of the application

3.leaveManagement.Infrastructure

    - Implements repository interfaces from the Domain layer
    - Contains database context and data access logic
    - Handles external concerns like data persistence

4.leaveManagement.Presentation

    - Contains API controllers and configuration
    - Depends on the Application layer for business logic
    - Handles HTTP requests and responses

***Design Patterns***

1. Repository Pattern (Implemented through interfaces like ILeaveRequestRepository and IEmployeeRepository)
2. Dependenccy Injection (Used throughout the application for loose coupling between components)
3. Factory Pattern (Used implicitly through Entity Framework's DbContext, ApplicationDbContext acts as a factory for creating and retrieving entities)

***Data Access***

- Entity Framework Core is used as the ORM
- SQLite database for data storage
- Seeding initial data through OnModelCreating
